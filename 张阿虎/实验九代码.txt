#include "stdafx.h"
struct Number{
    int sign; //用于表达符号，1为正数，-1为负数
    int num[300]; //用于存放每个位上的数值
    int length;  //位数
    int intLength; //整数部分的位数
};
int isZero(struct Number *n)
{
	if(n->length==1 && n->num[0]==0)
		return 1;
	return 0;
}
void setZero(struct Number *n)
{
	n->length=1;
	n->num[0]=0;
	n->sign=0;
	n->intLength=1;
}
//将浮点数规范化，即去除高位0，去除低位0
void formatNumber(struct Number *n)
{
	int i,k;
	//去除高位0
	k=0;
    while(n->num[k]==0)
        k++;
    //前移
    for(i=0;i<n->length;i++)
    {
        n->num[i]=n->num[i+k];
    }
    n->length-=k;
    n->intLength-=k;
	//去除低位0
	k=n->length-1;
    i=0;
    while(n->num[k]==0)
    {
        i++;
        k--;
    }
    n->length-=i;
	//为0的处理
	if(n->length==0)
		setZero(n);
}
//从字符串中解析长整数，参数offset：代表长整数在字符串中的位置
//返回值长整数的末尾在字符串中的位置
int getNumber(char* str,int offset,struct Number *n)
{
    int i=0;
    n->length=0;
    n->intLength=-1;
    if(str[offset]=='-')
    {
        n->sign=-1;
    }
    else if(str[offset]=='+')
    {
        n->sign=1;
    }
    else
    {
        n->sign=1;
        n->num[0]=str[offset]-'0';
        n->length++;
    }
    offset++;
    while(1)
    {
        if(str[offset]>='0' && str[offset]<='9')
        {
            n->num[n->length]=str[offset]-'0';
            n->length++;
            offset++;
        }
        else if(str[offset]=='.')
        {
            n->intLength=n->length;
            offset++;
        }
        else
        {
            break;
        }
    }
    if(n->intLength==-1)
        n->intLength=n->length;
	formatNumber(n);
    return offset;
}
//打印长整数
void printNumber(struct Number *n)
{
    if(n->sign==-1)
        printf("-");
    int i;
	//当n->intLength<=0时，补前面的0
	if(n->intLength<=0)
	{
		printf("0");
		for(i=n->intLength;i<0;i++)
		{
			if(i==n->intLength)
				printf(".");
			printf("0"); 
		}
	}
    for(i=0;i<n->length;i++)
    {
        if(i==n->intLength)
            printf(".");
        printf("%d",n->num[i]);    
    }
	//当n->inLength>n->length时，补后面的0
	for(i=n->length;i<n->intLength;i++)
		printf("0");
}

//数据扩充
void increaseLength(struct Number *n,int i)
{
	int j;
	if(i>=n->length)
	{
		for(j=n->length;j<=i;j++)
			n->num[j]=0;
		n->length=i+1;
	}
}
//参数isSub:为0做加法，为1做减法
void sum(struct Number* n1,struct Number* n2,struct Number* r)
{
    int i,dLen,k;
    struct Number* t;
    //将整数部分较长的数放在n1上
    if(n1->intLength<n2->intLength)
    {
        t=n1;
        n1=n2;
        n2=t;
    }
    r->length=n1->length;//设置r的长度
    r->intLength=n1->intLength;//设置r的整数部分长度
    //将n1中的数值放入r中
    for(i=0;i<n1->length;i++)
    {
        r->num[i]=n1->num[i]*n1->sign;
    }
    dLen=r->intLength-n2->intLength;//求两个数整数部分的长度差
	//r->length到dlen间补0
	for(i=r->length;i<dLen;i++)
	{
		r->num[i]=0;
	}
    //将n2中的数值错位加入r中
    for(i=0;i<n2->length;i++)
    {
        if(i+dLen>=r->length)          //判断是否超出R的原有长度
            r->num[i+dLen]=n2->num[i]*n2->sign;
        else
            r->num[i+dLen]+=n2->num[i]*n2->sign;
    }
    if(i+dLen>r->length)  //判断是否超出R的原有长度。增加R的长度
        r->length=i+dLen;
    //查找非0最高位，根据该位数值的符号，确定r的符号
    i=0;
    while(i<r->length && r->num[i]==0)
        i++;
    if(i>=r->length)//r中都是0的情况，必须先判断，防止数据越界
    {
        setZero(r);
        return;
    }
    else if(r->num[i]>0)//r是正数
    {
        r->sign=1;
    }
    else//r是负数
    {
        r->sign=-1;
    }
    //从个位开始做进位或退位处理
    k=0;//存放进位
    for(i=r->length-1;i>=0;i--)
    {
        r->num[i]+=k;
        if(r->num[i]==0)
        {
            k=0;
            continue;
        }
        if(r->num[i]*r->sign>0)//同号
        {
            k=r->num[i]/10;
            r->num[i]=r->num[i]%10*r->sign;
        }
        else//异号
        {
            k=-r->sign;
            r->num[i]=(r->sign*10+r->num[i]%10)*r->sign;
        }
    }
    if(k!=0)//对最高位的进位的判断，若有进位，数组中的数值后移，将进位值作为r的最高位值
    {
        //后移   
        for(i=r->length;i>=1;i--)
        {
            r->num[i]=r->num[i-1];
        }
        r->num[0]=k*r->sign;
        r->length++;
        r->intLength++;
    }
    formatNumber(r);
}
void sub(struct Number* n1,struct Number* n2,struct Number* r)
{
    n2->sign*=-1;
	sum(n1,n2,r);
    n2->sign*=-1;
}
void multiply(struct Number* n1,struct Number* n2,struct Number* r)
{
	struct Number a;
	int i,j;
	if(isZero(n1) || isZero(n2))
	{
		setZero(r);
		return;
	}
	r->sign=n1->sign*n2->sign;
	r->length=n1->length+n2->length;
	r->intLength=n1->intLength+n2->intLength;
	for(i=0;i<r->length;i++)
		r->num[i]=0;
	for(i=0;i<n1->length;i++)
	{
		for(j=0;j<n2->length;j++)
		{
			r->num[i+j+1]+=n1->num[i]*n2->num[j];
		}
	}
	//进位处理
	j=0;//存放进位
	for(i=r->length-1;i>=0;i--)
	{
		r->num[i]+=j;
		j=r->num[i]/10;
		r->num[i]%=10;
	}
	formatNumber(r);
}
void div(struct Number* n1,struct Number* n2,struct Number* r)
{
    int i,j,k,s,m,divEnd;
    struct Number t;
	//将n1复制到t中
	t=*n1;
	//t.length=n1->length;
 //   t.intLength=n1->intLength;
 //   for(i=0;i<n1->length;i++)
 //   {
 //       t.num[i]=n1->num[i];
 //   }
    //确定r的符号
    r->sign=t.sign*n2->sign;
    //初始化r的长度为0
    r->length=0;
	r->intLength=n1->intLength-n2->intLength+1;
	divEnd=0;//是否除完，初始化为0
    //高位残余k，初始为0
    k=0;
    for(i=0;1;i++)//处理被除数的i位，从最高位开始
    {
		if(i>=n1->length && (divEnd==1 || r->length-r->intLength>=50))
			break;
        //求初始的测试商
		increaseLength(&t,i);
        s=(t.num[i]+k*10)/n2->num[0];
        //测试并确定商
        if(s>=10)
            s=9;
        if(s!=0)
        {
            m=k;
            for(j=0;j<n2->length;j++)
            {
				increaseLength(&t,i+j);
                m=t.num[i+j]+m*10-n2->num[j]*s;
                if(m>8)
                    break;
                if(m<0)
                {
                    s--;
                    if(s==0)
                        break;
                    m=k;
                    j=-1;
                }
            }
        }
        //商放入结果
		if(s!=0 || r->length!=0)
        {
            r->num[r->length]=s;
            r->length++;
        }
		else
		{
			r->intLength--;
		}
        //被除数-除数*商
		divEnd=1;
        m=0;
        for(j=n2->length-1;j>=0;j--)
        {
			increaseLength(&t,i+j);
            t.num[i+j]=t.num[i+j]+m-n2->num[j]*s;
            if(t.num[i+j]<0)
            {
                m=t.num[i+j]/10;
                t.num[i+j]%=10;
                if(t.num[i+j]!=0)
                {
                    m--;
                    t.num[i+j]+=10;
                }
            }
            else
            {
                m=0;
            }
			//只要有残留，则未除尽
			if(t.num[i+j]!=0)
				divEnd=0;
        }
        //本位的残余放入k中
        k=t.num[i];
    }
	formatNumber(r);
}

int _tmain(int argc, _TCHAR* argv[]){
	char str[3000];
	int offset;
	struct Number a,b,e,r;
	char c,c1;
	while(scanf("%s",str)!=EOF)
	{
		offset=getNumber(str,0,&a);
		while(1)
		{
			c=str[offset];
			if(c=='\0')
				break;
			offset=getNumber(str,offset+1,&b);
			if(!(c=='*'||c=='/'||str[offset]=='+'||str[offset]=='-'||str[offset]=='\0'))
			{
				while(1)
				{
					c1=str[offset];
					offset=getNumber(str,offset+1,&e);
					switch(c1)
					{
						case '*':multiply(&b,&e,&r);break;
						case '/':div(&b,&e,&r);
					}
					b=r;
					if(str[offset]=='+'||str[offset]=='-'||str[offset]=='\0')
						break;
				}
			}
			switch(c)
			{
				case '*':multiply(&a,&b,&r);break;
				case '/':div(&a,&b,&r);break;
				case '+':sum(&a,&b,&r);break;
				case '-':sub(&a,&b,&r);break;
			}
			a=r;
		}
		printNumber(&a);
		printf("\n");
	}
	return 0;
}